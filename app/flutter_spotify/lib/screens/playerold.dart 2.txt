/** README
 * # Todo
 * -genres
 */
 import 'dart:async';
 import 'dart:core';
 import 'dart:typed_data';

 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';
 import 'package:flutter/widgets.dart';
 import 'package:flutter_dotenv/flutter_dotenv.dart';
 import 'package:logger/logger.dart';
 import 'package:spotify_sdk/models/connection_status.dart';
 import 'package:spotify_sdk/models/crossfade_state.dart';
 import 'package:spotify_sdk/models/image_uri.dart';
 // import 'package:spotify_sdk/models/player_context.dart';
 import 'package:spotify_sdk/models/player_state.dart';
 import 'package:spotify_sdk/spotify_sdk.dart';
 //import 'package:spotify_sdk/spotify_sdk_web.dart';
 //import 'package:curved_navigation_bar/curved_navigation_bar.dart';
 //import 'package:flutter_speed_dial/flutter_speed_dial.dart';

 import 'widgets/sized_icon_button.dart';
 // import 'dart:developer' as developer;
 //import 'package:spotify_sdk_example/widgets/loader.dart';
 //import 'package:spotify_sdk_example/widgets/overlay.dart';
 import 'package:supabase_flutter/supabase_flutter.dart';
 // import 'package:shared_preferences/shared_preferences.dart';
 import './theme.dart';


/// A [StatefulWidget] which uses:
/// * [spotify_sdk](https://pub.dev/packages/spotify_sdk)
/// to connect to Spotify and use controls.
class Home extends StatefulWidget {
  const Home({Key? key}) : super(key: key);
  @override
  _HomeState createState() => _HomeState();
}

class _HomeState extends State<Home> {
  bool _loading = false;
  bool _connected = false;
  final Logger _logger = Logger();

  CrossfadeState? crossfadeState;

  // @override
  // void initState() async {
  //   super.initState();
  //   SharedPreferences prefs = await SharedPreferences.getInstance();
  //   if (prefs.getString('token') != null) {
  //     _connected = true;//! expired
  //   }
  // }

  // void _incrementCounter() async {
  //   Loader.appLoader.showLoader();
  //   Loader.appLoader.setText('this is custom error message');
  //   await Future.delayed(Duration(seconds: 5));
  //   // Loader.appLoader.hideLoader();
  // }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Title',
      theme: ThemeData(
        brightness: Brightness.light,
        /* light theme settings */
      ),
      darkTheme: ThemeData(
        brightness: Brightness.dark,
        /* dark theme settings */
      ),
      themeMode: ThemeMode.dark,
      /* ThemeMode.system to follow system theme,
         ThemeMode.light for light theme,
         ThemeMode.dark for dark theme
      */
      debugShowCheckedModeBanner: false,
      home: NewHome(),
      StreamBuilder<ConnectionStatus>(
        stream: SpotifySdk.subscribeConnectionStatus(),
        builder: (context, snapshot) {
          _connected = false;
          var data = snapshot.data;
          if (data != null) {
            _connected = data.connected;
          }

          //Color iconColor = ThemeData.dark().colorScheme.secondaryVariant;

          return Scaffold(
            appBar: AppBar(
              centerTitle: false,
              title: const Text('Spotify OverControl'),
              leading: Builder(
                builder: (BuildContext context) {
                  return IconButton(
                    icon: const Icon(Icons.menu),
                    onPressed: () {
                      Scaffold.of(context).openDrawer();
                    },
                    tooltip:
                        MaterialLocalizations.of(context).openAppDrawerTooltip,
                  );
                },
              ),
              actions: [
                _connected
                    ? IconButton(
                        onPressed: disconnect,
                        icon: const Icon(Icons.exit_to_app),
                      )
                    : IconButton(
                        onPressed: getAuthenticationToken,
                        icon: const Icon(Icons.account_circle),
                      ),
                IconButton(
                  onPressed: connectToSpotifyRemote,
                  icon: Icon(Icons.wifi),
                ),
              ],
            ),
            body: _sampleFlowWidget(context),
            floatingActionButton: FloatingActionButton(
                child: const Icon(Icons.add), onPressed: () {}),
          );
        },
      ),
    );
  }

  // Widget _buildBottomBar(BuildContext context) {
  //   return BottomAppBar(
  //     child: Column(
  //       mainAxisSize: MainAxisSize.min,
  //       children: [
  //         Row(
  //           mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  //           children: <Widget>[
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.skip_previous,
  //               onPressed: skipPrevious,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.play_arrow,
  //               onPressed: resume,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.pause,
  //               onPressed: pause,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.skip_next,
  //               onPressed: skipNext,
  //             ),
  //           ],
  //         ),
  //         Row(
  //           mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  //           children: <Widget>[
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.queue_music,
  //               onPressed: queue,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.play_circle_filled,
  //               onPressed: play,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.repeat,
  //               onPressed: toggleRepeat,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               icon: Icons.shuffle,
  //               onPressed: toggleShuffle,
  //             ),
  //           ],
  //         ),
  //         Row(
  //           mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  //           children: [
  //             SizedIconButton(
  //               width: 50,
  //               onPressed: addToLibrary,
  //               icon: Icons.favorite,
  //             ),
  //             SizedIconButton(
  //               width: 50,
  //               onPressed: () => {}, //checkIfAppIsActive(context),
  //               icon: Icons.info,
  //             ),
  //           ],
  //         ),
  //       ],
  //     ),
  //   );
  // }

  Widget _sampleFlowWidget(BuildContext context2) {
    return Stack(
      children: [
        ListView(
          padding: const EdgeInsets.all(8),
          children: [
            // Row(
            //   mainAxisAlignment: MainAxisAlignment.spaceBetween,
            //   children: <Widget>[
            //     TextButton(
            //       onPressed: connectToSpotifyRemote,
            //       child: const Icon(Icons.settings_remote),
            //     ),
            //     TextButton(
            //       onPressed: getAuthenticationToken,
            //       child: const Text('get auth token '),
            //     ),
            //   ],
            // ),
            // const Divider(),
            // const Text(
            //   'Player State',
            //   style: TextStyle(
            //     fontSize: 16,
            //     fontWeight: FontWeight.bold,
            //   ),
            // ),
            _connected
                ? _buildPlayerStateWidget()
                : const Center(
              child: Text('Not connected'),
            ),
            const Divider(),
            // const Text(
            //   'Player Context',
            //   style: TextStyle(
            //     fontSize: 16,
            //     fontWeight: FontWeight.bold,
            //   ),
            // ),
            // _connected
            //     ? _buildPlayerContextWidget()
            //     : const Center(
            //         child: Text('Not connected'),
            //       ),
            // const Divider(),
            // const Text(
            //   'Player Api',
            //   style: TextStyle(
            //     fontSize: 16,
            //     fontWeight: FontWeight.bold,
            //   ),
            // ),
            // Row(
            //   children: <Widget>[
            //     TextButton(
            //       onPressed: seekTo,
            //       child: const Text('seek to 20000ms'),
            //     ),
            //     TextButton(
            //       onPressed: seekToRelative,
            //       child: const Text('seek to relative 20000ms'),
            //     ),
            //   ],
            // ),
            // const Divider(),
            // const Text(
            //   'Crossfade State',
            //   style: TextStyle(
            //     fontSize: 16,
            //     fontWeight: FontWeight.bold,
            //   ),
            // ),
            // ElevatedButton(
            //   onPressed: getCrossfadeState,
            //   child: Text(
            //     'get crossfade state',
            //   ),
            // ),
            // // ignore: prefer_single_quotes
            // Text("Is enabled: ${crossfadeState?.isEnabled}"),
            // // ignore: prefer_single_quotes
            // Text("Duration: ${crossfadeState?.duration}"),
            // const Divider(),
            // _connected
            //     ? spotifyImageWidget()
            //     : const Text('Connect to see an image...'),
          ],
        ),
        _loading
            ? Container(
            color: Colors.black12,
            child: const Center(child: CircularProgressIndicator()))
            : const SizedBox(),
      ],
    );
  }

  Widget _buildPlayerStateWidget() {
    return StreamBuilder<PlayerState>(
      stream: SpotifySdk.subscribePlayerState(),
      builder: (BuildContext context, AsyncSnapshot<PlayerState> snapshot) {
        var track = snapshot.data?.track;
        var playerState = snapshot.data;

        if (playerState == null || track == null) {
          return Center(
            child: Text('${track?.name}'),
          );
        }

        return Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            // Text(
            //     '${track.name} by ${track.artist.name} from the album ${track.album.name}'),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                SizedIconButton(
                    width: 20, icon: Icons.expand_more, onPressed: () {}),
                const Text('Daily Mix 2'),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: SizedIconButton(
                      width: 20, icon: Icons.more_horiz, onPressed: () {}),
                ),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Playback speed: ${playerState.playbackSpeed}'),
                Text(
                    'Progress: ${(playerState.playbackPosition / 1000).round()}s/${(track.duration / 1000).round()}s'),
              ],
            ),
            // Row(
            //   mainAxisAlignment: MainAxisAlignment.spaceBetween,
            //   children: [
            //     Text('Paused: ${playerState.isPaused}'),
            //     Text('Shuffling: ${playerState.playbackOptions.isShuffling}'),
            //   ],
            // ),
            // Text('RepeatMode: ${playerState.playbackOptions.repeatMode}'),
            // Text('Image URI: ${track.imageUri.raw}'),
            //Image.network(track.imageUri.raw),
            FutureBuilder(
                future: SpotifySdk.getImage(
                  imageUri: ImageUri(track.imageUri.raw),
                  dimension: ImageDimension.large,
                ),
                builder:
                    (BuildContext context, AsyncSnapshot<Uint8List?> snapshot) {
                  if (snapshot.hasData) {
                    return Image.memory(snapshot.data!);
                  } else if (snapshot.hasError) {
                    setStatus(snapshot.error.toString());
                    return SizedBox(
                      width: ImageDimension.large.value.toDouble(),
                      height: ImageDimension.large.value.toDouble(),
                      child: const Center(child: Text('Error getting image')),
                    );
                  } else {
                    return SizedBox(
                      width: ImageDimension.large.value.toDouble(),
                      height: ImageDimension.large.value.toDouble(),
                      child: const Center(child: Text('Getting image...')),
                    );
                  }
                }),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Center(
                  child: Column(
                    children: [
                      Text(track.name),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Center(child: Text(track.artist.name)),
                      ),
                    ],
                  )),
            ),
            // SPlider(
            //     value: playerState.playbackPosition, duration: track.duration),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                SizedIconButton(
                  width: 30,
                  icon: Icons.favorite,
                  onPressed: skipNext,
                ),
                SizedIconButton(
                  width: 50,
                  icon: Icons.skip_previous,
                  onPressed: skipPrevious,
                ),
                playerState.isPaused
                    ? SizedIconButton(
                  width: 50,
                  icon: Icons.play_arrow,
                  onPressed: resume,
                )
                    : SizedIconButton(
                  width: 50,
                  icon: Icons.pause,
                  onPressed: pause,
                ),
                SizedIconButton(
                  width: 50,
                  icon: Icons.skip_next,
                  onPressed: skipNext,
                ),
                SizedIconButton(
                  width: 30,
                  icon: Icons.remove_circle_outline,
                  onPressed: skipNext,
                ),
              ],
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    SizedIconButton(
                      width: 30,
                      icon: Icons.favorite,
                      onPressed: skipNext,
                    ),
                    Row(children: [
                      SizedIconButton(
                        width: 30,
                        icon: Icons.wifi,
                        onPressed: skipNext,
                      ),
                      SizedIconButton(
                        width: 30,
                        icon: Icons.favorite,
                        onPressed: skipNext,
                      ),
                    ]),
                  ]),
            ),
            // Text('Is episode? ${track.isEpisode}'),
            // Text('Is podcast? ${track.isPodcast}'),
            // Column(
            //   crossAxisAlignment: CrossAxisAlignment.start,
            //   children: [
            //     const Divider(),
            //     const Text(
            //       'Set Shuffle and Repeat',
            //       style: TextStyle(fontSize: 16),
            //     ),
            //     Row(
            //       children: [
            //         const Text(
            //           'Repeat Mode:',
            //         ),
            //         DropdownButton<RepeatMode>(
            //           value: RepeatMode
            //               .values[playerState.playbackOptions.repeatMode.index],
            //           items: [
            //             DropdownMenuItem(
            //               value: RepeatMode.off,
            //               child: Text('off'),
            //             ),
            //             DropdownMenuItem(
            //               value: RepeatMode.track,
            //               child: Text('track'),
            //             ),
            //             DropdownMenuItem(
            //               value: RepeatMode.context,
            //               child: Text('context'),
            //             ),
            //           ],
            //           onChanged: (repeatMode) => setRepeatMode(repeatMode!),
            //         ),
            //       ],
            //     ),
            //     Row(
            //       children: [
            //         Text('Set shuffle: '),
            //         Switch.adaptive(
            //           value: playerState.playbackOptions.isShuffling,
            //           onChanged: (bool shuffle) => setShuffle(
            //             shuffle,
            //           ),
            //         ),
            //       ],
            //     ),
            //   ],
            // ),
          ],
        );
      },
    );
  }

  // Widget _buildPlayerContextWidget() {
  //   return StreamBuilder<PlayerContext>(
  //     stream: SpotifySdk.subscribePlayerContext(),
  //     initialData: PlayerContext('', '', '', ''),
  //     builder: (BuildContext context, AsyncSnapshot<PlayerContext> snapshot) {
  //       var playerContext = snapshot.data;
  //       if (playerContext == null) {
  //         return const Center(
  //           child: Text('Not connected'),
  //         );
  //       }
  //
  //       return Column(
  //         mainAxisAlignment: MainAxisAlignment.start,
  //         crossAxisAlignment: CrossAxisAlignment.start,
  //         children: <Widget>[
  //           Text('Title: ${playerContext.title}'),
  //           Text('Subtitle: ${playerContext.subtitle}'),
  //           Text('Type: ${playerContext.type}'),
  //           Text('Uri: ${playerContext.uri}'),
  //         ],
  //       );
  //     },
  //   );
  // }

  Future<void> disconnect() async {
    try {
      setState(() {
        _loading = true;
      });
      var result = await SpotifySdk.disconnect();
      setStatus(result ? 'disconnect successful' : 'disconnect failed');
      setState(() {
        _loading = false;
      });
    } on PlatformException catch (e) {
      setState(() {
        _loading = false;
      });
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setState(() {
        _loading = false;
      });
      setStatus('not implemented');
    }
  }

  Widget spotifyImageWidget() {
    return FutureBuilder(
        future: SpotifySdk.getImage(
          imageUri: ImageUri(
              'spotify:image:ab67616d0000b2736b4f6358fbf795b568e7952d'),
          dimension: ImageDimension.large,
        ),
        builder: (BuildContext context, AsyncSnapshot<Uint8List?> snapshot) {
          if (snapshot.hasData) {
            return Image.memory(snapshot.data!);
          } else if (snapshot.hasError) {
            setStatus(snapshot.error.toString());
            return SizedBox(
              width: ImageDimension.large.value.toDouble(),
              height: ImageDimension.large.value.toDouble(),
              child: const Center(child: Text('Error getting image')),
            );
          } else {
            return SizedBox(
              width: ImageDimension.large.value.toDouble(),
              height: ImageDimension.large.value.toDouble(),
              child: const Center(child: Text('Getting image...')),
            );
          }
        });
  }

  Future<void> connectToSpotifyRemote() async {
    try {
      setState(() {
        _loading = true;
      });

      var result = await SpotifySdk.connectToSpotifyRemote(
        clientId: dotenv.env['CLIENT_ID'].toString(),
        redirectUrl: dotenv.env['REDIRECT_URL'].toString(),
        //TODO accessToken
      );
      setStatus(result
          ? 'connect to spotify successful'
          : 'connect to spotify failed');
      setState(() {
        _loading = false;
      });
    } on PlatformException catch (e) {
      setState(() {
        _loading = false;
      });
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setState(() {
        _loading = false;
      });
      setStatus('not implemented');
    }
  }

  Future<String> getAuthenticationToken() async {
    try {
      var authenticationToken = await SpotifySdk.getAuthenticationToken(
          clientId: dotenv.env['CLIENT_ID'].toString(),
          redirectUrl: dotenv.env['REDIRECT_URL'].toString(),
          scope: 'app-remote-control, '
              'user-modify-playback-state, '
              'playlist-read-private, '
              'playlist-modify-public,user-read-currently-playing');
      setStatus('Got a token: $authenticationToken');
      return authenticationToken;
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
      return Future.error('$e.code: $e.message');
    } on MissingPluginException {
      setStatus('not implemented');
      return Future.error('not implemented');
    }
  }

  Future getPlayerState() async {
    try {
      return await SpotifySdk.getPlayerState();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future getCrossfadeState() async {
    try {
      var crossfadeStateValue = await SpotifySdk.getCrossFadeState();
      setState(() {
        crossfadeState = crossfadeStateValue;
      });
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> queue() async {
    try {
      await SpotifySdk.queue(
          spotifyUri: 'spotify:track:58kNJana4w5BIjlZE2wq5m');
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> toggleRepeat() async {
    try {
      await SpotifySdk.toggleRepeat();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> setRepeatMode(RepeatMode repeatMode) async {
    try {
      await SpotifySdk.setRepeatMode(
        repeatMode: repeatMode,
      );
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> setShuffle(bool shuffle) async {
    try {
      await SpotifySdk.setShuffle(
        shuffle: shuffle,
      );
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> toggleShuffle() async {
    try {
      await SpotifySdk.toggleShuffle();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> play() async {
    try {
      await SpotifySdk.play(spotifyUri: 'spotify:track:58kNJana4w5BIjlZE2wq5m');
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> pause() async {
    try {
      await SpotifySdk.pause();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> resume() async {
    try {
      await SpotifySdk.resume();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> skipNext() async {
    try {
      //move to cache - local state object - syncing; firebase
      await SpotifySdk.skipNext();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> skipPrevious() async {
    try {
      await SpotifySdk.skipPrevious();
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> seekTo() async {
    try {
      await SpotifySdk.seekTo(positionedMilliseconds: 20000);
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> seekToRelative() async {
    try {
      await SpotifySdk.seekToRelativePosition(relativeMilliseconds: 20000);
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  Future<void> addToLibrary() async {
    try {
      await SpotifySdk.addToLibrary(
          spotifyUri: 'spotify:track:58kNJana4w5BIjlZE2wq5m');
    } on PlatformException catch (e) {
      setStatus(e.code, message: e.message);
    } on MissingPluginException {
      setStatus('not implemented');
    }
  }

  // Future<void> checkIfAppIsActive(BuildContext context) async {
  //   try {
  //     var isActive = await SpotifySdk.isSpotifyAppActive;
  //     final snackBar = SnackBar(
  //         content: Text(isActive
  //             ? 'Spotify app connection is active (currently playing)'
  //             : 'Spotify app connection is not active (currently not playing)'));
  //
  //     ScaffoldMessenger.of(context).showSnackBar(snackBar);
  //   } on PlatformException catch (e) {
  //     setStatus(e.code, message: e.message);
  //   } on MissingPluginException {
  //     setStatus('not implemented');
  //   }
  // }

  void setStatus(String code, {String? message}) {
    var text = message ?? '';
    _logger.i('$code$text');
  }
}

class SPlider extends StatefulWidget {
  SPlider({Key? key, required this.value, required this.duration})
      : super(key: key);

  int value;
  final int duration;

  @override
  _SPliderState createState() => _SPliderState();
}

class _SPliderState extends State<SPlider> {
  Timer? timer;
  int cur = 0;
  @override
  void initState() {
    super.initState();
    timer = Timer.periodic(
        const Duration(seconds: 1),
            (Timer t) => setState(() {
          widget.value = 1000 + widget.value;
        }));
  }

  @override
  Widget build(BuildContext context) {
    return Slider(
      value: widget.value / 1000, //playerState.playbackPosition.toDouble(),
      onChanged: (double newValue) {
        // SpotifySdk.seekTo(newValue.toInteger());
        // setState(() {
        //   widget.value = widget.value+1.0;
        // });
        debugPrint('seeking');
      },
      min: 0.0,
      max: widget.duration / 1000,
      divisions: (widget.duration / 1000).round(),
      // label: playerState.playbackPosition.toString()
    );
  }
}
